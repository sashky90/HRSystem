@model HRSystem.Services.ViewModels.TeamWithEmployeesViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Team", FormMethod.Post, new { id = "beginForm", @class = "editForm" }))
{
    <div class="form-horizontal">
        <h4>Team</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Delivery, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Delivery, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Delivery, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LeaderId, "Leader", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownList("LeaderId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LeaderId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectId, "Project", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.ProjectId == null)
                {
                    @Html.DropDownList("ProjectId", null, "Select project", htmlAttributes: new { @class = "form-control", data_project = "project" })
                }
                else
                {
                    @Html.DropDownList("ProjectId", null, "Select to remove project", htmlAttributes: new { @class = "form-control", data_project = "project" })
                }

                @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-10">
                @Html.Label("Select to remove project", new { @class = "control-label col-md-2" })
                @Html.CheckBox("cbProjectEdit", false, new { id = "cbProject" })
            </div>
        </div>
        @Html.Label("Team members ", new { @class = "control-label col-md-2" })
        <button type="button" class="btn btn-default btn-sm" id="add-member-btn">
            Add new member
            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
        </button>
        <table class="table" id="tableEmployees">
            @if (Model.Members != null)
            {
                foreach (var member in Model.Members)
                {
                    int index = Model.Members.IndexOf(member);

                    if (member.Id != Model.LeaderId)
                    {
                        <tr>
                            <td>
                                <div class="form-group">
                                    @Html.Label("Team member: ", new { @class = "control-label col-md-2" })
                                    @Html.DisplayFor(m => m.Members[index].NamePositionAndEmail)
                                    @Html.HiddenFor(model => model.Members[index].Id, new { data_container = "members" })
                                </div>

                            </td>
                            <td>
                                <button type="button" class="btn btn-default btn-group-sm" id="delete-employee-btn">
                                    Delete
                                    <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                </button>
                            </td>
                        </tr>
                    }
                }
            }

        </table>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<table>
    <tr id="template-row">
        <td class="col-md-10">
            @Html.Label("Choose team member: ", new { @class = "control-label col-md-2" })
            @Html.DropDownList("Members[index].Id", (SelectList)ViewBag.FreeEmployees, new { data_container = "members", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Members, "", new { @class = "text-danger" })
        </td>
        <td id="td-delete-employee">
            <button type="button" class="btn btn-default btn-group-sm removeRow" id="delete-employee-btn">
                Delete
                <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
            </button>
        </td>
    </tr>
</table>

<div>
    @Html.ActionLink("Back to the List", "Index", null, new { @class = "btn btn-default" })
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/CustomJs/add-remove.employees.js"></script>
    <script src="~/Scripts/CustomJs/editTeam.onSubmit.js"></script>
}

